#!/usr/bin/env node
const pgk = require("../package.json");
const path = require("path");
const server = require("../src/server");
const { mclip } = require("mclip");
const { existsSync, readFileSync } = require("fs");

const confFile = path.join(process.cwd(), ".kservezrc");

function getFileConf(verbose) {
  const exists = existsSync(confFile);
  if (!exists) {
    return {};
  }
  if (verbose) {
    console.log("Using config file:", confFile, exists);
  }
  const str = readFileSync(confFile, "utf8");
  return JSON.parse(str);
}

const defaults = {
  port: 7000,
  publicPath: process.cwd(),
  proxy: [],
  verbose: true,
  frontendRouting: true, // Does not raise 404, but returns index.html
  ssl: false, // enables https server
};

const options = mclip(process.argv, {
  ssl: { description: "Creates an https server" },
  frontendRouting: {
    description: "Leaves the routes to the frontend application",
  },
  port: {
    short: "p",
    description: "Server port",
    default: defaults.port,
    validate: (value) => {
      const port = parseInt(value, 10);
      return !(isNaN(port) || port < 0 || port > 65535);
    },
  },
  verbose: { short: "v", description: "Verbose" },
});

const conf = {
  ...defaults,
  ...getFileConf(options.verbose),
  ...options,
};

const [firstParam] = conf.list;

if (firstParam) {
  conf.publicPath = firstParam;
}

// Resolve path
conf.publicPath = path.resolve(conf.publicPath);

// version and name
conf.version = pgk.version;
conf.name = pgk.name;

try {
  server(conf);
} catch (err) {
  console.error(err);
  process.exit(1);
}
